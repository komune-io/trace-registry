[
    {
        "name": "none with all false values",
        "expression": { "none": [[-1, -2, -3], { ">": [{ "var": "item" }, 0] }] },
        "expected": true
    },
    {
        "name": "none with one true value",
        "expression": { "none": [[-1, 0, 3], { ">": [{ "var": "item" }, 0] }] },
        "expected": false
    },
    {
        "name": "none with all true values",
        "expression": { "none": [[1, 2, 3], { ">": [{ "var": "item" }, 0] }] },
        "expected": false
    },
    {
        "name": "none with empty array",
        "expression": { "none": [[], { ">": [{ "var": "item" }, 0] }] },
        "expected": true
    },
    {
        "name": "none with variable array",
        "expression": { "none": [{ "var": "numbers" }, { ">": [{ "var": "item" }, 5] }] },
        "data": { "numbers": [1, 2, 3] },
        "expected": true
    },
    {
        "name": "none with complex condition",
        "expression": { "none": [[1, 3, 5, 7], { "==": [{ "%": [{ "var": "item" }, 2] }, 0] }] },
        "expected": true
    },
    {
        "name": "none with too few arguments",
        "expression": { "none": [[1, 2, 3]] },
        "errorJsonPath": "$.none"
    },
    {
        "name": "none with too many arguments",
        "expression": { "none": [[1, 2, 3], { ">": [{ "var": "item" }, 0] }, "extra"] },
        "errorJsonPath": "$.none"
    },
    {
        "name": "none with non-array first argument",
        "expression": { "none": ["not an array", { ">": [{ "var": "item" }, 0] }] },
        "errorJsonPath": "$.none[0]"
    },
    {
        "name": "none with iteration data",
        "expression": { "none": [
            ["apple", "banana", "cherry"],
            { "var": { "concat": ["data.restricted_items.", { "var": "item" }] } }
        ]},
        "data": {
            "restricted_items": {
                "apple": true,
                "banana": false,
                "cherry": true
            }
        },
        "expected": false
    }
]
