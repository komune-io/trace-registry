# .github/workflows/deploy.yml
name: Deployment Workflow

on:
  workflow_call:
    inputs:
      environment:
        description: 'Target deployment environment: dev, preprod, or prod'
        required: true
        type: string
      run_reset:
        description: 'Set to "true" to perform a reset (stack removal) before deployment (non-prod only)'
        required: false
        default: "false"
        type: string

jobs:
  create_env:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Create Environment File
        shell: bash
        run: |
          echo "Creating environment file for ${{ inputs.environment }}..."
          cp infra/docker-compose/.env_dev_default infra/docker-compose/.env_dev_100m_${{ inputs.environment }}

  reset:
    if: ${{ inputs.environment == 'dev' || inputs.environment == 'preprod' }}
    needs: create_env
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Check if Reset Is Enabled
        shell: bash
        run: |
          if [ "${{ inputs.run_reset }}" != "true" ]; then
            echo "Reset not enabled. Skipping reset step."
            exit 0
          fi

      - name: Add SSH key
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DOCKER_CONTEXT_SSH_KEY }}" > ~/.ssh/github_actions
          chmod 600 ~/.ssh/github_actions
          ssh-add ~/.ssh/github_actions
      - name: Ensure Docker Context Exists (Reset)
        shell: bash
        env:
          SERVER_IP: ${{ env.SERVER_IP }}
        run: |
          echo "Ensuring docker context 100m_${{ inputs.environment }} exists..."
          if ! docker context ls -q | grep -w "100m_${{ inputs.environment }}" ; then
            docker context create 100m_${{ inputs.environment }} --docker "host=ssh://kosmio@${SERVER_IP}:2234"
          fi

      - name: Reset Docker Stack
        shell: bash
        run: |
          echo "Resetting Docker stack for ${{ inputs.environment }} environment..."
          docker context use 100m_${{ inputs.environment }}
          docker stack rm registry-${{ inputs.environment }}-network || true
          docker volume rm registry-${{ inputs.environment }}-network_meilisearch_data registry-${{ inputs.environment }}-network_minio registry-${{ inputs.environment }}-network_postgres_data || true

  deploy_nonprod:
    if: ${{ inputs.environment == 'dev' || inputs.environment == 'preprod' }}
    needs: [create_env, reset]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Ensure Docker Context Exists (Deploy Non-Prod)
        shell: bash
        env:
          DOCKER_CONTEXT: ${{ env.DOCKER_CONTEXT }}
        run: |
          echo "Ensuring docker context 100m_${{ inputs.environment }} exists..."
          if ! docker context ls -q | grep -w "100m_${{ inputs.environment }}" ; then
            docker context create 100m_${{ inputs.environment }} --docker "host=${DOCKER_CONTEXT}"
          fi

      - name: Deploy Docker Services (Dev/Preprod)
        shell: bash
        run: |
          echo "Deploying Docker services to ${{ inputs.environment }} environment..."
          docker context use 100m_${{ inputs.environment }}
          # Make scripts auto-detect the correct .env file
          make proxy deploy
          make connect deploy
          make connect-init deploy
          make registry deploy

  deploy_prod:
    if: ${{ inputs.environment == 'prod' }}
    needs: create_env
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Ensure Docker Context Exists (Deploy Prod)
        shell: bash
        env:
          SERVER_IP: ${{ env.SERVER_IP }}
        run: |
          echo "Ensuring docker context 100m_${{ inputs.environment }} exists..."
          if ! docker context ls -q | grep -w "100m_${{ inputs.environment }}" ; then
            docker context create 100m_${{ inputs.environment }} --docker "host=ssh://kosmio@${SERVER_IP}:2234"
          fi

      - name: Deploy Docker Services (Prod)
        shell: bash
        run: |
          echo "Deploying Docker services to Prod environment..."
          docker context use 100m_${{ inputs.environment }}
          make proxy deploy
          make connect deploy
          make connect-init deploy
          make registry deploy
